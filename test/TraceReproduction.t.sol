// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "forge-std/console.sol";

interface IGetStakingContractBalanceContract {
    function getStakingContractBalance() external;
    function getTokenBalance() external;
}

contract TraceReproduction is Test {
    // Addresses
    address constant MAIN_ADDRESS = 0x2073111E6Ebb6826F7e9c6192C6304Aa5aF5E340;
    address constant ADDR1 = 0x08947cedf35f9669012bDA6FdA9d03c399B017Ab; // Unknown (UNK)

    function setUp() public {
        // Fork at specific block
        vm.createFork(vm.envString("RPC_URL"), 23377331);
        vm.selectFork(0);
        
        // Setup test environment
        vm.label(MAIN_ADDRESS, "MainContract");
        
        // Deal some ETH to main address for gas
        vm.deal(MAIN_ADDRESS, 10 ether);
    }

    function testReproduceTrace() public {
        // Start prank as main address
        vm.startPrank(MAIN_ADDRESS);

        // Calls to ADDR1
        // unknownCall
        // ⚠️  Unknown function selector - using raw calldata
        (bool success, bytes memory result) = ADDR1.call(
            hex"60e060405234801561000f575f5ffd5b506040516111853803806111858339818101604052810190610031919061019f565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060805173ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100b0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100d4919061019f565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250503373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050506101ca565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61016e82610145565b9050919050565b61017e81610164565b8114610188575f5ffd5b50565b5f8151905061019981610175565b92915050565b5f602082840312156101b4576101b3610141565b5b5f6101c18482850161018b565b91505092915050565b60805160a05160c051610f3661024f5f395f818161012b01528181610516015281816106bd0152818161079c01526107d701525f81816101ba01528181610479015281816105a501528181610681015281816107fc01526108dd01525f81816101f6015281816102e2015281816103b40152818161083801526108b90152610f365ff3fe608060405234801561000f575f5ffd5b506004361061007b575f3560e01c80638da5cb5b116100595780638da5cb5b146100b1578063c486ad37146100cf578063ee99205c146100ed578063fc0c546a1461010b5761007b565b8063643a0e921461007f57806382b2e257146100895780638d8f2adb146100a7575b5f5ffd5b610087610129565b005b610091610476565b60405161009e9190610917565b60405180910390f35b6100af610514565b005b6100b96107d5565b6040516100c6919061096f565b60405180910390f35b6100d76107f9565b6040516100e49190610917565b60405180910390f35b6100f56108b7565b60405161010291906109e3565b60405180910390f35b6101136108db565b6040516101209190610a1c565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae90610a8f565b60405180910390fd5b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610231919061096f565b602060405180830381865afa15801561024c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102709190610adb565b90505f81116102b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ab90610b50565b60405180910390fd5b5f30826040516020016102c8929190610bd3565b6040516020818303038152906040528051906020012090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634783f0ef826040518263ffffffff1660e01b81526004016103399190610c16565b5f604051808303815f87803b158015610350575f5ffd5b505af1158015610362573d5f5f3e3d5ffd5b505050505f5f67ffffffffffffffff81111561038157610380610c2f565b5b6040519080825280602002602001820160405280156103af5781602001602082028036833780820191505090505b5090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632f52ebb784836040518363ffffffff1660e01b815260040161040d929190610d13565b5f604051808303815f87803b158015610424575f5ffd5b505af1158015610436573d5f5f3e3d5ffd5b505050507f3c92b007d4471ad421225950d1da74d65f1a432fb12bfc964eb21095a41c3b5a836040516104699190610917565b60405180910390a1505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104d0919061096f565b602060405180830381865afa1580156104eb573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061050f9190610adb565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059990610d8b565b60405180910390fd5b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105fc919061096f565b602060405180830381865afa158015610617573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061063b9190610adb565b90505f811161067f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067690610df3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb7f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016106fa929190610e11565b6020604051808303815f875af1158015610716573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073a9190610e6d565b610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077090610ee2565b60405180910390fd5b7f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b7f0000000000000000000000000000000000000000000000000000000000000000826040516107ca929190610e11565b60405180910390a150565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610873919061096f565b602060405180830381865afa15801561088e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108b29190610adb565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f819050919050565b610911816108ff565b82525050565b5f60208201905061092a5f830184610908565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61095982610930565b9050919050565b6109698161094f565b82525050565b5f6020820190506109825f830184610960565b92915050565b5f819050919050565b5f6109ab6109a66109a184610930565b610988565b610930565b9050919050565b5f6109bc82610991565b9050919050565b5f6109cd826109b2565b9050919050565b6109dd816109c3565b82525050565b5f6020820190506109f65f8301846109d4565b92915050565b5f610a06826109b2565b9050919050565b610a16816109fc565b82525050565b5f602082019050610a2f5f830184610a0d565b92915050565b5f82825260208201905092915050565b7f4f6e6c79206f776e65722063616e2065786563757465000000000000000000005f82015250565b5f610a79601683610a35565b9150610a8482610a45565b602082019050919050565b5f6020820190508181035f830152610aa681610a6d565b9050919050565b5f5ffd5b610aba816108ff565b8114610ac4575f5ffd5b50565b5f81519050610ad581610ab1565b92915050565b5f60208284031215610af057610aef610aad565b5b5f610afd84828501610ac7565b91505092915050565b7f4e6f20746f6b656e7320746f20647261696e00000000000000000000000000005f82015250565b5f610b3a601283610a35565b9150610b4582610b06565b602082019050919050565b5f6020820190508181035f830152610b6781610b2e565b9050919050565b5f8160601b9050919050565b5f610b8482610b6e565b9050919050565b5f610b9582610b7a565b9050919050565b610bad610ba88261094f565b610b8b565b82525050565b5f819050919050565b610bcd610bc8826108ff565b610bb3565b82525050565b5f610bde8285610b9c565b601482019150610bee8284610bbc565b6020820191508190509392505050565b5f819050919050565b610c1081610bfe565b82525050565b5f602082019050610c295f830184610c07565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610c8e81610bfe565b82525050565b5f610c9f8383610c85565b60208301905092915050565b5f602082019050919050565b5f610cc182610c5c565b610ccb8185610c66565b9350610cd683610c76565b805f5b83811015610d06578151610ced8882610c94565b9750610cf883610cab565b925050600181019050610cd9565b5085935050505092915050565b5f604082019050610d265f830185610908565b8181036020830152610d388184610cb7565b90509392505050565b7f4f6e6c79206f776e65722063616e2077697468647261770000000000000000005f82015250565b5f610d75601783610a35565b9150610d8082610d41565b602082019050919050565b5f6020820190508181035f830152610da281610d69565b9050919050565b7f4e6f20746f6b656e7320746f20776974686472617700000000000000000000005f82015250565b5f610ddd601583610a35565b9150610de882610da9565b602082019050919050565b5f6020820190508181035f830152610e0a81610dd1565b9050919050565b5f604082019050610e245f830185610960565b610e316020830184610908565b9392505050565b5f8115159050919050565b610e4c81610e38565b8114610e56575f5ffd5b50565b5f81519050610e6781610e43565b92915050565b5f60208284031215610e8257610e81610aad565b5b5f610e8f84828501610e59565b91505092915050565b7f546f6b656e207472616e73666572206661696c656400000000000000000000005f82015250565b5f610ecc601583610a35565b9150610ed782610e98565b602082019050919050565b5f6020820190508181035f830152610ef981610ec0565b905091905056fea264697066735822122075f0b221020f1210ce2319b1b2cc6ab0bab6a0c97715f1bdb6f498150e80d45264736f6c634300081e00330000000000000000000000003f4d749675b3e48bccd932033808a7079328eb48"
        );
        require(success, "Raw call failed");
        console.logBytes(result); // Log the result for debugging

        // getStakingContractBalance
        IGetStakingContractBalanceContract(ADDR1).getStakingContractBalance();

        // getTokenBalance
        IGetStakingContractBalanceContract(ADDR1).getTokenBalance();

        // unknownFunction_0x643a0e92
        // ⚠️  Unknown function selector - using raw calldata
        (bool success, bytes memory result) = ADDR1.call(
            hex"643a0e92"
        );
        require(success, "Raw call failed");
        console.logBytes(result); // Log the result for debugging


        vm.stopPrank();
    }
}
